[{"/workspace/TGC9-react/08-todo-list/src/reportWebVitals.js":"1","/workspace/TGC9-react/08-todo-list/src/TaskList.js":"2","/workspace/TGC9-react/09-todo-list-managed-components/src/index.js":"3","/workspace/TGC9-react/09-todo-list-managed-components/src/reportWebVitals.js":"4","/workspace/TGC9-react/09-todo-list-managed-components/src/App.js":"5","/workspace/TGC9-react/09-todo-list-managed-components/src/TaskList.js":"6","/workspace/TGC9-react/09-todo-list-managed-components/src/AddNewTask.js":"7","/workspace/TGC9-react/09-todo-list-managed-components/src/Task.js":"8","/workspace/TGC9-react/09-todo-list-managed-components/src/EditTask.js":"9"},{"size":362,"mtime":1608605334439,"results":"10","hashOfConfig":"11"},{"size":927,"mtime":1608606324831,"results":"12","hashOfConfig":"11"},{"size":500,"mtime":1609135304657,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1609135304661,"results":"15","hashOfConfig":"14"},{"size":165,"mtime":1609138085213,"results":"16","hashOfConfig":"14"},{"size":7432,"mtime":1609138085521,"results":"17","hashOfConfig":"14"},{"size":835,"mtime":1609138085405,"results":"18","hashOfConfig":"14"},{"size":806,"mtime":1609138085529,"results":"19","hashOfConfig":"14"},{"size":779,"mtime":1609138085529,"results":"20","hashOfConfig":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9a6j8k",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iwrfir",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/TGC9-react/08-todo-list/src/reportWebVitals.js",[],"/workspace/TGC9-react/08-todo-list/src/TaskList.js",[],"/workspace/TGC9-react/09-todo-list-managed-components/src/index.js",[],"/workspace/TGC9-react/09-todo-list-managed-components/src/reportWebVitals.js",[],"/workspace/TGC9-react/09-todo-list-managed-components/src/App.js",[],"/workspace/TGC9-react/09-todo-list-managed-components/src/TaskList.js",["41","42"],"import React from \"react\";\nimport \"./App.css\";\nimport Task from './Task'\nimport AddNewTask from './AddNewTask'\nimport EditTask from './EditTask'\n// uses state, so we need a class-based component\nexport default class TaskList extends React.Component {\n    state = {\n        tasks: [\n            {\n                _id: 1,\n                title: \"Wash the car\",\n                date: \"2020-01-01\",\n                done: false\n            },\n            {\n                _id: 2,\n                title: \"Clean the floor\",\n                date: \"2020-01-02\",\n                done: false\n            },\n            {\n                _id: 3,\n                title: \"Pay the bills\",\n                date: \"2020-01-03\",\n                done: false\n            }\n        ],\n        newTaskTitle: \"\",\n        newTaskDate: \"\",\n        // if 0, means no task is being edited, >0 if otherwise\n        taskIdBeingEdited: 0\n    };\n\n    // renderTasks() {\n    //     let jsx = [];\n    //     for (let t of this.state.tasks) {\n    //         jsx.push(<React.Fragment>\n    //             <li>{t.title} - {t.done ? 'Completed' : 'Incomplete'}</li>\n    //         </React.Fragment>)\n    //     }\n    //     return jsx;\n    // }\n\n    render() {\n        return (\n            <React.Fragment>\n                {this.state.tasks.map(t => {\n                    if (this.state.taskIdBeingEdited != t._id) {\n                        return <Task\n                            task={t}\n                            updateTaskDone={this.updateTaskDone}\n                            beginEditTask={this.beginEditTask}\n                            deleteTask={this.deleteTask}\n                        />\n                    } else {\n                        return <EditTask\n                            modifiedTaskTitle={this.state.modifiedTaskTitle}\n                            modifiedTaskDate={this.state.modifiedTaskDate}\n                            updateFormField={this.updateFormField}\n                            cancelEdit={this.cancelEdit}\n                            updateTask={this.updateTask}\n                            task={t}\n\n                        />\n                    }\n                })}\n                <AddNewTask\n                    newTaskTitle={this.state.newTaskTitle}\n                    newTaskDate={this.state.newTaskDate}\n                    updateFormField={this.updateFormField}\n                    addNewTask={this.addNewTask}\n                />\n            </React.Fragment>\n        );\n    }\n\n    // this is a callback function so must be arrow function\n    updateFormField = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    addNewTask = () => {\n        let newTask = {\n            _id: Math.floor(Math.random() * 100000) + 99999,\n            title: this.state.newTaskTitle,\n            date: this.state.newTaskDate\n        };\n\n        // add this new task to the tasks array\n        // this.state.tasks.push(newTask);\n        // step 1: clone the existing array\n        // let cloned = [...this.state.tasks];\n\n        // // step 2: make the changes to the clone\n        // cloned.push(newTask);\n\n        // // step 3: replace the original array with clone\n        // this.setState({\n        //     'tasks' :cloned\n        // })\n\n        this.setState({\n            tasks: [...this.state.tasks, newTask],\n            newTaskTitle: \"\",\n            newTaskDate: \"\"\n        });\n    };\n\n    beginEditTask = (task) => {\n        this.setState({\n            taskIdBeingEdited: task._id,\n            modifiedTaskDate: task.date,\n            modifiedTaskTitle: task.title\n        });\n    }\n\n    cancelEdit = () => {\n        this.setState({\n            taskIdBeingEdited: 0\n        });\n    };\n\n    //   updateTask = (task) => {\n\n    //     // 1. clone the task that is being updated\n    //     let clonedTask = {...task};\n\n    //     // 2. change the clone\n    //     clonedTask.title = this.state.modifiedTaskTitle;\n    //     clonedTask.date = this.state.modifiedTaskDate;\n\n    //     // 3. clone the array\n    //     let clonedArray = [...this.state.tasks];\n\n    //     // 4. find the index of the task that we want to update\n    //     let index = clonedArray.findIndex( t => t._id === task._id);\n\n    //     // findIndex is e.q.v to:\n    //     // let index = -1;\n    //     // for (let i=0; i < clonedArray.length; i++) {\n    //     //     if (clonedArray[i]._id === task._id) {\n    //     //         index = i;\n    //     //         break;\n    //     //     }\n    //     // }\n\n    //     // 5. replace the index in the cloned array with the cloned task\n    //     clonedArray[index] = clonedTask;\n\n    //     // 6. set the cloned array back to the state\n    //     this.setState({\n    //         tasks: clonedArray,\n    //         taskIdBeingEdited:0\n    //     })\n\n    //   }\n\n    updateTask = task => {\n        let index = this.state.tasks.findIndex(t => t._id === task._id);\n        this.setState({\n            tasks: [\n                ...this.state.tasks.slice(0, index),\n                {\n                    title: this.state.modifiedTaskTitle,\n                    date: this.state.modifiedTaskDate,\n                    done: task.done\n                },\n                ...this.state.tasks.slice(index + 1)\n            ]\n        });\n    };\n\n    //  deleteTask = (task) => {\n    //      // 1. find the index of the task we want to delete\n    //      let index = this.state.tasks.findIndex( t => t._id === task._id);\n\n    //      // 2. cloned the original array\n    //      let cloned = [...this.state.tasks]\n\n    //      // 3. use splice on the cloned array to delete by index\n    //      cloned.splice(index, 1);\n\n    //      // 4. set the cloned array back into the state\n    //      this.setState({\n    //          tasks: cloned\n    //      })\n    //  }\n\n    deleteTask = task => {\n        let index = this.state.tasks.findIndex(t => t._id === task._id);\n        this.setState({\n            tasks: [\n                ...this.state.tasks.slice(0, index),\n                ...this.state.tasks.slice(index + 1)\n            ]\n        });\n    };\n\n    //   updateTaskDone = task => {\n\n    //       // 1. clone the object that you changing\n    //       let clonedTask = {...task};\n\n    //       // 2. change the clone\n    //       // if the task is complete, then set it as incompleted\n    //       if (clonedTask.done === true) {\n    //           clonedTask.done = false;\n    //       } else {\n    //           clonedTask.done = true;\n    //       }\n\n    //       // 3. find the index of the original object in the array\n    //       let index = this.state.tasks.findIndex( t => t._id == clonedTask._id);\n\n    //       // 4. clone the array\n    //       let clonedArray = [...this.state.tasks];\n\n    //       // 5. replace the original object in the array with the clone\n    //       clonedArray[index] = clonedTask;\n\n    //       // 6. set the cloned array into the state\n    //       this.setState({\n    //           tasks: clonedArray\n    //       })\n    //   }\n\n    updateTaskDone = (task) => {\n        let index = this.state.tasks.findIndex(t => t._id == task._id);\n        this.setState({\n            tasks: [\n                ...this.state.tasks.slice(0, index),\n                {\n                    ...task,\n                    done: task.done ? false : true\n                },\n                ...this.state.tasks.slice(index + 1)\n            ]\n        })\n    }\n}",["43","44"],"/workspace/TGC9-react/09-todo-list-managed-components/src/AddNewTask.js",[],"/workspace/TGC9-react/09-todo-list-managed-components/src/Task.js",[],"/workspace/TGC9-react/09-todo-list-managed-components/src/EditTask.js",[],{"ruleId":"45","severity":1,"message":"46","line":49,"column":44,"nodeType":"47","messageId":"48","endLine":49,"endColumn":46},{"ruleId":"45","severity":1,"message":"49","line":231,"column":56,"nodeType":"47","messageId":"48","endLine":231,"endColumn":58},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-global-assign","no-unsafe-negation"]